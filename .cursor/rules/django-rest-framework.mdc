---
description: 当用户需要构建RESTful API、序列化数据或处理API认证与权限时提供参考。适用于开发Web API、前后端分离架构或移动应用后端的场景。
globs: 
alwaysApply: false
---
# Django REST Framework指南

Django REST Framework (DRF)是Django的扩展，用于构建RESTful API。

## 基本组件

### 序列化器(Serializers)
将模型实例转换为JSON/XML等格式，或将JSON/XML转换为模型实例。

```python
from rest_framework import serializers
from .models import Book

class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = ['id', 'title', 'author', 'published_date', 'price']
        # 或使用 fields = '__all__' 包含所有字段
```

### 视图(Views)
处理API请求和响应。

#### 基于函数的视图
```python
from rest_framework.decorators import api_view
from rest_framework.response import Response

@api_view(['GET', 'POST'])
def book_list(request):
    if request.method == 'GET':
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        serializer = BookSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)
```

#### 基于类的视图
```python
from rest_framework.views import APIView

class BookList(APIView):
    def get(self, request):
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data)
    
    def post(self, request):
        serializer = BookSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)
```

#### 通用视图
```python
from rest_framework import generics

class BookList(generics.ListCreateAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

class BookDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
```

#### 视图集(ViewSets)
```python
from rest_framework import viewsets

class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
```

### 路由(Routers)
自动为视图集生成URL。

```python
from rest_framework.routers import DefaultRouter
from .views import BookViewSet

router = DefaultRouter()
router.register(r'books', BookViewSet)

urlpatterns = [
    path('api/', include(router.urls)),
]
```

## 认证与权限

### 认证类
```python
from rest_framework.authentication import TokenAuthentication, SessionAuthentication

class BookViewSet(viewsets.ModelViewSet):
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    # ...
```

### 权限类
```python
from rest_framework.permissions import IsAuthenticated, IsAdminUser

class BookViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
    # ...
```

## 过滤与分页

### 过滤
```python
from django_filters.rest_framework import DjangoFilterBackend

class BookViewSet(viewsets.ModelViewSet):
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['title', 'author', 'published_date']
```

### 分页
```python
# settings.py
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}
```

## 最佳实践

1. 使用嵌套序列化器处理关系
2. 实现自定义权限类控制访问
3. 使用版本控制API
4. 提供API文档(如使用drf-yasg)
5. 实现适当的异常处理

