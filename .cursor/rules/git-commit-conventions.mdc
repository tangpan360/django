---
description: 当用户需要了解Git提交规范、版本控制最佳实践或分支管理策略时提供参考。适用于团队协作、代码审查或版本历史管理的场景。
globs: 
alwaysApply: false
---
# Git提交规范指南

良好的Git提交规范有助于项目协作、代码审查和版本历史追踪。本规范基于Angular提交规范进行定制。

## 提交消息格式

```
<类型>(<可选范围>): <简短描述>

<可选详细描述>

<可选关闭的问题>
```

例如:
```
feat(auth): 添加用户注册功能

实现了邮箱验证和密码强度检测

Closes #123
```

## 提交类型

- `feat`: 新功能或特性
  - 例: `feat: 添加文章分享功能`
  - 例: `feat(user): 实现用户头像上传`

- `fix`: Bug修复
  - 例: `fix: 修复移动端页面布局错乱问题`
  - 例: `fix(auth): 修复登录失败后未显示错误信息`

- `docs`: 文档更新
  - 例: `docs: 更新API文档`
  - 例: `docs(readme): 添加开发环境配置说明`

- `style`: 代码风格调整(不影响代码功能)
  - 例: `style: 格式化代码以符合PEP8规范`
  - 例: `style(models): 调整缩进和空行`

- `refactor`: 代码重构(既不是新增功能，也不是修复bug)
  - 例: `refactor: 重构用户认证逻辑`
  - 例: `refactor(views): 使用类视图替代函数视图`

- `test`: 添加或修改测试
  - 例: `test: 为用户注册流程添加单元测试`
  - 例: `test(api): 增加API端点的集成测试`

- `chore`: 构建过程或辅助工具变动
  - 例: `chore: 更新依赖包版本`
  - 例: `chore(ci): 配置GitHub Actions自动部署`

- `perf`: 性能优化
  - 例: `perf: 优化数据库查询性能`
  - 例: `perf(images): 实现图片懒加载`

## 提交范围(可选)

范围用于说明提交影响的范围，通常是模块、组件或功能名称：

- `auth`: 认证相关
- `api`: API相关
- `core`: 核心功能
- `ui`: 用户界面
- `docs`: 文档
- `tests`: 测试
- `deps`: 依赖项

## 提交描述

- 使用现在时态的祈使句: "修复"而不是"修复了"或"修复中"
- 首字母不要大写
- 结尾不要加句号
- 简明扼要，不超过50个字符

## 详细描述(可选)

- 提供更详细的上下文说明
- 可以包含多行
- 解释"为什么"进行这次更改，而不仅仅是"做了什么"

## 关闭问题(可选)

如果提交解决了某个Issue，可以通过以下方式关联:

```
Closes #123
Fixes #456
Resolves #789
```

## 实际示例

```
feat(auth): 实现基于JWT的认证系统

- 添加JWT令牌生成和验证
- 实现令牌刷新机制
- 集成到现有用户系统

Closes #45
```

```
fix(pagination): 修复分页组件在大数据量时的性能问题

优化了分页算法，减少了不必要的数据库查询

Fixes #78
```

```
refactor(views): 将函数视图重构为类视图

提高了代码复用性和可维护性，同时保持API不变

```

## 使用工具

可以使用以下工具帮助规范提交:

- Commitizen: 交互式提交消息工具
- Commitlint: 提交消息校验工具
- Husky: Git钩子管理

## 分支管理建议

- `main/master`: 主分支，保持稳定可发布状态
- `develop`: 开发分支，包含最新开发特性
- `feature/*`: 功能分支，用于开发新功能
- `bugfix/*`: 修复分支，用于修复非紧急bug
- `hotfix/*`: 热修复分支，用于修复生产环境紧急问题
- `release/*`: 发布分支，用于版本发布准备
